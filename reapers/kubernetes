#!/bin/bash
set -a
ORIGINAL_JOB=$JOB

query_pods()
{
  kubectl ${KUBECTL_FLAGS:-} get pods -a --selector=service=$JOB "$@" 2> /dev/null
}

oldest_pod(){  
  query_pods -o=custom-columns=STATUS:.status.startTime,NAME:.metadata.name \
   | sort | head -n1 | awk '{ print $5 }'
}

reap()
{
  source /etc/default/$JOB
 
  export START=$(kubectl ${KUBECTL_FLAGS:-} get job $job_name -o=template --template={{.status.startTime}} 2> /dev/null)
  export END=$(kubectl ${KUBECTL_FLAGS:-} get job $job_name -o=template --template={{.status.completionTime}} 2> /dev/null)
  if [[ "$END" == "<no value>" ]]; then #Failure to launch results in nil completion
    END='' #allow alerter to set it to current time
  fi

  kubectl ${KUBECTL_FLAGS:-} delete job $job_name &> /dev/null
  echo "[$JOB] Reaping @ [$OUTPUT] @ $END"

  if [ $ALERTER ]; then
      export POD_NAME=$pod
      . /app/alerters/$ALERTER
  fi
}

if [[ "$KUBERNETES_MASTER" == *"https"* || "$KUBERNETES_MASTER" == *"443"* ]]; then
  KUBECTL_FLAGS="--token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt ${KUBECTL_FLAGS:-}"
fi

# If job set. Reap that job
# Itereate over all finished jobs
if [ -z "$JOB" ] ; then
  all_jobs=($(kubectl ${KUBECTL_FLAGS:-} get jobs -o=jsonpath='{.items[*].metadata.name}' 2> /dev/null))
else
  all_jobs=($(kubectl ${KUBECTL_FLAGS:-} get jobs --selector=service=${JOB} -o=jsonpath='{.items[*].metadata.name}' 2> /dev/null))
fi

for job_name in "${all_jobs[@]}"
do
  #Get the original job name
  JOB=$(kubectl ${KUBECTL_FLAGS:-} get jobs $job_name -o=jsonpath={.metadata.labels.service} 2> /dev/null)
  if [ -f "/etc/default/$JOB" ] ; then
    pod=$(oldest_pod)
    STATUS=$(kubectl ${KUBECTL_FLAGS:-} get pod $pod -o=jsonpath={.status.phase} 2> /dev/null); STATUS_CMD=$?

    case $STATUS in
      Pending|Running )
        
        #ERRORS=$(kubectl ${KUBECTL_FLAGS:-} get pod $pod -o=jsonpath='{.status.containerStatuses[0].state.waiting.message}' 2> /dev/null); ERROR_CMD=$?
        #if [[ $ERROR_CMD -eq 0 ]]; then
        #  OUTPUT="[${JOB}] - Unknown pending status - ${ERRORS}"
        #  STATUS="Error in Pending"
        #  EXIT_CODE=98
        #else
        OUTPUT="$STATUS"
        #fi
        
      ;;
      Succeeded|Failed )
        EXIT_CODE=$(kubectl ${KUBECTL_FLAGS:-} get pod $pod -o=jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')
        if ! [ "$EXIT_CODE" -eq "$EXIT_CODE" ] 2> /dev/null ; then
          OUTPUT="Invalid EXIT_CODE [$EXIT_CODE]"
          EXIT_CODE=99
        else
          REASON=$(kubectl ${KUBECTL_FLAGS:-} get pod $pod -o=jsonpath='{.status.containerStatuses[0].state.terminated.reason}')
          if [[ "$REASON" == "OOMKilled" ]]; then
            EXIT_CODE=137
          fi
          OUTPUT="$STATUS with exit code [$EXIT_CODE] for [$REASON]"
          reap
        fi
      ;;
      * )
        STATUS="Unknown"
        if [[ $STATUS_CMD -ne 0 ]]; then 
          OUTPUT="Failure to get phase"
          SUCCEEDED=$(kubectl ${KUBECTL_FLAGS:-} get jobs $job_name -o=jsonpath={.status.succeeded})
          if [[ $SUCCEEDED -gt 0 ]]; then
            OUTPUT="Pods missing, but job reports succeeded"
            reap
          fi
        else
          OUTPUT="Unknown Status for Job [$STATUS] - The pod has likely been deleted"
          EXIT_CODE=404
        fi
      ;;
    esac
  fi
done

JOB=$ORIGINAL_JOB
